<?xml version="1.0" encoding="utf-8"?>
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml">

	<mx:Script>
		<![CDATA[
			import net.bing.NewsResult;
			import net.bing.SearchResponse;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import net.bing.SearchResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.core.Application;
			
			[Bindable]
			private var historyData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var urlHash:Dictionary = new Dictionary();
			
			public function showResults(e:Event):void
			{
				trace("showing search results (results found from query)");
				if(e is FaultEvent)
				{
					Alert.show("Error While Searching.");
					return;
				}
				else if(e is SearchResultEvent)
				{
					var event:SearchResultEvent = e as SearchResultEvent;
					//change view
					Application.application.resultViewStack.selectedIndex = 1;
					if (event.result.News != null)
					{
						if (event.result.News.Results.length != 0)
						{	
							historyData.addItemAt(event.result, 0);
							history.selectedIndex = 0;
							var resp:SearchResponse = historyData.getItemAt(0) as SearchResponse;			
							list.dataProvider = resp.News.Results;
							
							for (var i:int = 0; i < resp.News.Results.length; i++)
							{
								var nr:NewsResult = resp.News.Results.getNewsResultAt(i);
								if (urlHash[nr.Url] == undefined)
								{
									urlHash[nr.Url] = new ArrayCollection();
									var obj:Object = new Object();
									obj.parent = resp;
									obj.newsresult = nr;
									trace("O: " +obj +" D " +obj.parent +" I " +obj.newsresult);
									ArrayCollection(urlHash[nr.Url]).addItem(obj);
								}
								else
								{
									ArrayCollection(urlHash[nr.Url]).addItem(nr);
								}
							}
						}
						else {
							Alert.show("The Result Array is Empty!!");
						}
					}
					else { 
						Alert.show("Search object is NULL!!");
					}
				
				}
			}
			
			public function historyListClick(e:Event):void
			{
				var resp:SearchResponse = historyData.getItemAt(history.selectedIndex) as SearchResponse;			
				list.dataProvider = resp.News.Results;
			}
		]]>
	</mx:Script>
	
	<mx:List id="list" height="100%" width="80%" itemRenderer="SearchResults.SearchResultsItemRenderer"/>
	
	<mx:List id="history" height="100%" width="20%" itemRenderer="SearchResults.HistoryItemRenderer"
		dataProvider="{historyData}" click="historyListClick(event)"/>
	
</mx:HDividedBox>
